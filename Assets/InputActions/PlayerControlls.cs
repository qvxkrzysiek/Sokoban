//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions/PlayerControlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControlls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControlls"",
    ""maps"": [
        {
            ""name"": ""Movement Action Map"",
            ""id"": ""861c10a8-bfb0-4351-976e-0c07920217de"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""efc326f5-b7fe-4079-9a03-d69c63ce497f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""3ac86904-9577-4296-804b-121ca0870098"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""ac839be3-3cc3-442e-8ad9-a63cd14f5288"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a32f6f72-7bda-47a7-a226-6a6a5d2a6c60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Undo"",
                    ""type"": ""Button"",
                    ""id"": ""736c1b65-600b-453a-9dc2-132fed47a1bd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""57ecef61-479f-4e2f-a7b8-5a3691b0b7c6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0ac61f-54b1-4d1b-b287-501e5d04191a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a238049-2522-4508-9cc7-4be6a48bba74"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ce7cfad-c3fe-4c72-a5ce-7ab0fbec8757"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4c2c7c01-4661-4832-abd1-a37dcbe71f41"",
                    ""path"": ""<Keyboard>/u"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Undo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement Action Map
        m_MovementActionMap = asset.FindActionMap("Movement Action Map", throwIfNotFound: true);
        m_MovementActionMap_Up = m_MovementActionMap.FindAction("Up", throwIfNotFound: true);
        m_MovementActionMap_Down = m_MovementActionMap.FindAction("Down", throwIfNotFound: true);
        m_MovementActionMap_Left = m_MovementActionMap.FindAction("Left", throwIfNotFound: true);
        m_MovementActionMap_Right = m_MovementActionMap.FindAction("Right", throwIfNotFound: true);
        m_MovementActionMap_Undo = m_MovementActionMap.FindAction("Undo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement Action Map
    private readonly InputActionMap m_MovementActionMap;
    private List<IMovementActionMapActions> m_MovementActionMapActionsCallbackInterfaces = new List<IMovementActionMapActions>();
    private readonly InputAction m_MovementActionMap_Up;
    private readonly InputAction m_MovementActionMap_Down;
    private readonly InputAction m_MovementActionMap_Left;
    private readonly InputAction m_MovementActionMap_Right;
    private readonly InputAction m_MovementActionMap_Undo;
    public struct MovementActionMapActions
    {
        private @PlayerControlls m_Wrapper;
        public MovementActionMapActions(@PlayerControlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_MovementActionMap_Up;
        public InputAction @Down => m_Wrapper.m_MovementActionMap_Down;
        public InputAction @Left => m_Wrapper.m_MovementActionMap_Left;
        public InputAction @Right => m_Wrapper.m_MovementActionMap_Right;
        public InputAction @Undo => m_Wrapper.m_MovementActionMap_Undo;
        public InputActionMap Get() { return m_Wrapper.m_MovementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @Undo.started += instance.OnUndo;
            @Undo.performed += instance.OnUndo;
            @Undo.canceled += instance.OnUndo;
        }

        private void UnregisterCallbacks(IMovementActionMapActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @Undo.started -= instance.OnUndo;
            @Undo.performed -= instance.OnUndo;
            @Undo.canceled -= instance.OnUndo;
        }

        public void RemoveCallbacks(IMovementActionMapActions instance)
        {
            if (m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActionMapActions @MovementActionMap => new MovementActionMapActions(this);
    public interface IMovementActionMapActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnUndo(InputAction.CallbackContext context);
    }
}
